openapi: 3.0.0
info:
  title: Bookstore
  description: An API for managing books, users, reviews
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /books:
    get:
      summary: Get all books
      description: Returns a list of all books.
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a new book
      description: Creates a new book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{id}:
    get:
      summary: Get a book by ID
      description: Returns a book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update a book by ID
      description: Updates an existing book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookDTO'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a book by ID
      description: Deletes an existing book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/:
    post:
      summary: Register a new user
      description: Registers a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDTO'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: User login
      description: Authenticates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        _id:
          type: string
          description: The book's unique ID
          example: "60d9c6c5b4d6b72d28fb3d3b"
        title:
          type: string
          description: The book's title
          example: "The Great Gatsby"
        description:
          type: string
          description: A brief description of the book
          example: "A novel set in the Roaring Twenties"
        author:
          type: string
          description: The book's author
          example: "F. Scott Fitzgerald"
        reviews:
          type: array
          items:
            type: string
            description: Review ID
            example: "60d9c6c5b4d6b72d28fb3d3c"
    BookDTO:
      type: object
      properties:
        title:
          type: string
          description: The book's title
          example: "The Great Gatsby"
        description:
          type: string
          description: A brief description of the book
          example: "A novel set in the Roaring Twenties"
        author:
          type: string
          description: The book's author
          example: "F. Scott Fitzgerald"
    UpdateBookDTO:
      type: object
      properties:
        title:
          type: string
          description: The book's title
          example: "The Great Gatsby"
        description:
          type: string
          description: A brief description of the book
          example: "A novel set in the Roaring Twenties"
        author:
          type: string
          description: The book's author
          example: "F. Scott Fitzgerald"
    RegisterDTO:
      type: object
      properties:
        username:
          type: string
          description: The user's username
          example: "johndoe"
        password:
          type: string
          description: The user's password
          example: "Password123!"
        email:
          type: string
          description: The user's email
          example: "johndoe@example.com"
    LoginDTO:
      type: object
      properties:
        username:
          type: string
          description: The user's username
          example: "johndoe"
        password:
          type: string
          description: The user's password
          example: "Password123!"
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"
    Error:
      type: object
      properties:
        message:
          type: string
          example: "An error occurred"
